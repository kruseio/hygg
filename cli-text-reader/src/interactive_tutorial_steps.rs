use crossterm::style::{Color, SetForegroundColor, SetAttribute, Attribute, ResetColor};
use crate::interactive_tutorial_buffer::{InteractiveTutorialStep, TutorialSuccessCondition};
use crate::interactive_tutorial_utils::fetch_github_stars;

pub fn get_interactive_tutorial_steps() -> Vec<InteractiveTutorialStep> {
  let stars_text = fetch_github_stars();
  
  vec![
    InteractiveTutorialStep {
      title: "hygg - simplifying the way you read".to_string(),
      instructions: vec![
        "".to_string(),
        "Why choose hygg?".to_string(),
        "‚Ä¢ üìñ Universal document support - PDF, EPUB, and OCR".to_string(),
        "‚Ä¢ ‚ö° Lightning-fast navigation with vim keybindings".to_string(),
        "‚Ä¢ üîç Powerful search, highlights, and bookmarks".to_string(),
        "‚Ä¢ üíæ Never lose your place - automatic progress saving".to_string(),
        "‚Ä¢ üõ†Ô∏è Extensible workflows - execute commands from text".to_string(),
        "‚Ä¢ üîí Privacy-first - your documents stay on your machine".to_string(),
        "".to_string(),
        format!("{}github.com/kruserr/hygg{} | {}", 
          SetForegroundColor(Color::Blue), ResetColor, stars_text),
        "".to_string(),
        "This interactive tutorial will teach you everything in ~5 minutes.".to_string(),
        "".to_string(),
        "‚Üí Type :next to begin your journey...".to_string(),
      ],
      practice_text: vec![],
      success_check: TutorialSuccessCondition::NoCondition,
    },
    InteractiveTutorialStep {
      title: "Basic Navigation".to_string(),
      instructions: vec![
        "Let's start with basic cursor movement.".to_string(),
        "".to_string(),
        "The area below is interactive - you can practice here!".to_string(),
        "".to_string(),
        "Movement keys:".to_string(),
        "  ‚Ä¢ h/‚Üê = left    ‚Ä¢ j/‚Üì = down    ‚Ä¢ k/‚Üë = up    ‚Ä¢ l/‚Üí = right".to_string(),
        "".to_string(),
        "Advanced movement:".to_string(),
        "  ‚Ä¢ w/b = forward/backward by word".to_string(),
        "  ‚Ä¢ {/} = previous/next paragraph".to_string(),
        "  ‚Ä¢ gg/G = go to start/end of document".to_string(),
        "".to_string(),
        "‚Üí Try it now: Press 'j' or ‚Üì to move down...".to_string(),
      ],
      practice_text: vec![
        "Welcome to the practice area!".to_string(),
        "You can move around freely here.".to_string(),
        "".to_string(),
        "Try pressing 'j' to move down ‚Üì".to_string(),
        "".to_string(),
        "Your cursor should move to this line!".to_string(),
        "".to_string(),
        "Great job! Keep practicing movement.".to_string(),
      ],
      success_check: TutorialSuccessCondition::KeyPress("j".to_string()),
    },
    InteractiveTutorialStep {
      title: "Visual Selection".to_string(),
      instructions: vec![
        "Let's practice visual selection:".to_string(),
        "".to_string(),
        "1. Press 'v' to enter visual mode".to_string(),
        "2. Move to select text".to_string(),
        "3. Press 'y' to yank (copy) the selection".to_string(),
        "".to_string(),
        "‚Üí Select any word below and yank it...".to_string(),
      ],
      practice_text: vec![
        "Practice selecting text in this paragraph.".to_string(),
        "You can select individual words or entire lines.".to_string(),
        "".to_string(),
        "Try selecting this word: example".to_string(),
        "Or select this entire line with 'V'.".to_string(),
        "".to_string(),
        "Remember: 'v' for character, 'V' for line selection.".to_string(),
      ],
      success_check: TutorialSuccessCondition::YankOperation,
    },
    InteractiveTutorialStep {
      title: "Text Objects - Paragraph Selection".to_string(),
      instructions: vec![
        "Text objects make selection powerful:".to_string(),
        "".to_string(),
        "‚Ä¢ v = enter visual mode".to_string(),
        "‚Ä¢ ip = inner paragraph (while in visual mode)".to_string(),
        "‚Ä¢ :h = highlight selection".to_string(),
        "".to_string(),
        "‚Üí Position cursor in a paragraph below".to_string(),
        "   Press 'v', then 'ip', then ':h' to highlight it...".to_string(),
      ],
      practice_text: vec![
        "This is the first paragraph. It contains".to_string(),
        "multiple lines that form a complete thought.".to_string(),
        "When you use 'vip', it selects all of this.".to_string(),
        "".to_string(),
        "This is the second paragraph. Notice how".to_string(),
        "paragraphs are separated by blank lines.".to_string(),
        "Try 'vip' here to select just this paragraph!".to_string(),
        "".to_string(),
        "And here's a third paragraph for practice.".to_string(),
      ],
      success_check: TutorialSuccessCondition::HighlightCreated,
    },
    InteractiveTutorialStep {
      title: "Search and Navigation".to_string(),
      instructions: vec![
        "Master both search directions:".to_string(),
        "".to_string(),
        "‚Ä¢ / = search forward (from cursor down)".to_string(),
        "‚Ä¢ ? = search backward (from cursor up)".to_string(),
        "‚Ä¢ n/N = next/previous match".to_string(),
        "‚Ä¢ * = search word under cursor".to_string(),
        "‚Ä¢ :nohl = clear search highlighting".to_string(),
        "".to_string(),
        "‚Üí Try both forward (/) and backward (?) search".to_string(),
        "   Search for 'special' and navigate with n/N".to_string(),
        "   You must use both / and ? to complete this step!".to_string(),
        "   Use :nohl to clear highlighting when done.".to_string(),
      ],
      practice_text: vec![
        "This text contains some special words.".to_string(),
        "When you find the word special, try both searches.".to_string(),
        "".to_string(),
        "The word special appears multiple times.".to_string(),
        "You can navigate between special occurrences.".to_string(),
        "Use n for next special, N for previous special.".to_string(),
        "".to_string(),
        "Try forward search (/) from the top,".to_string(),
        "and backward search (?) from the bottom.".to_string(),
        "This makes finding special text very easy!".to_string(),
      ],
      success_check: TutorialSuccessCondition::SearchBothDirections,
    },
    InteractiveTutorialStep {
      title: "Bookmarks".to_string(),
      instructions: vec![
        "Save positions with bookmarks:".to_string(),
        "".to_string(),
        "‚Ä¢ ma = set bookmark 'a'".to_string(),
        "‚Ä¢ 'a = jump to bookmark 'a'".to_string(),
        "‚Ä¢ '' = return to previous position".to_string(),
        "".to_string(),
        "‚Üí Set bookmark 'a' with 'ma', move away, then jump back with 'a...".to_string(),
      ],
      practice_text: vec![
        "Set a bookmark on this line with 'ma'.".to_string(),
        "Then move somewhere else.".to_string(),
        "".to_string(),
        "You can return with 'a anytime.".to_string(),
        "Bookmarks persist between sessions!".to_string(),
        "".to_string(),
        "Try setting multiple bookmarks: mb, mc, etc.".to_string(),
      ],
      success_check: TutorialSuccessCondition::BookmarkSetAndJumped('a'),
    },
    InteractiveTutorialStep {
      title: "Command Execution".to_string(),
      instructions: vec![
        "Run shell commands and use their output:".to_string(),
        "".to_string(),
        "‚Ä¢ :!command = execute shell command (opens a split)".to_string(),
        "‚Ä¢ Command output appears in bottom split".to_string(),
        "‚Ä¢ Move cursor with j/k to navigate output".to_string(),
        "‚Ä¢ yy = yank (copy) output line".to_string(),
        "‚Ä¢ Ctrl+V or Ctrl+R 0 = paste yanked text in command mode".to_string(),
        "‚Ä¢ :q = close split and return to tutorial".to_string(),
        "".to_string(),
        "‚Üí Try :!echo hello (or any echo command)".to_string(),
        "   Then practice the full workflow:".to_string(),
        "   yank output ‚Üí close ‚Üí paste in new command".to_string(),
      ],
      practice_text: vec![
        "Execute commands from within hygg!".to_string(),
        "".to_string(),
        "Full workflow practice:".to_string(),
        "".to_string(),
        "Step 1: Type :!echo hello".to_string(),
        "        A split will open with the output".to_string(),
        "".to_string(),
        "Step 2: In the split, yank the output:".to_string(),
        "        - Navigate to 'hello' with j/k".to_string(),
        "        - Press yy to yank the line".to_string(),
        "        - Type :q to close the split".to_string(),
        "".to_string(),
        "Step 3: Create a new command using the output:".to_string(),
        "        - Type :!echo<space> (but don't press Enter yet) ".to_string(),
        "        - Press Ctrl+V or Ctrl+R 0 to paste".to_string(),
        "        - Press Enter to execute".to_string(),
        "".to_string(),
        "This powerful workflow lets you chain commands!".to_string(),
      ],
      success_check: TutorialSuccessCondition::CommandExecutedYankedAndPasted("!echo".to_string()),
    },
    InteractiveTutorialStep {
      title: "Congratulations! üéâ".to_string(),
      instructions: vec![
        "You've mastered the essentials of hygg!".to_string(),
        "".to_string(),
        "You've learned:".to_string(),
        "‚Ä¢ ‚úì Navigation and movement".to_string(),
        "‚Ä¢ ‚úì Visual selection and text objects".to_string(),
        "‚Ä¢ ‚úì Search and bookmarks".to_string(),
        "‚Ä¢ ‚úì Command execution".to_string(),
        "".to_string(),
        "Resources:".to_string(),
        format!("‚Ä¢ Type {}:help{} to see all available commands", 
          SetForegroundColor(Color::Yellow), ResetColor),
        format!("‚Ä¢ Documentation: {}github.com/kruserr/hygg{}", 
          SetForegroundColor(Color::Blue), ResetColor),
        "".to_string(),
      ],
      practice_text: vec![
        "Quick Reference:".to_string(),
        "".to_string(),
        "Essential commands:".to_string(),
        "  :help     - Show all commands".to_string(),
        "  :tutorial - Restart this tutorial".to_string(),
        "  :q        - Quit".to_string(),
        "".to_string(),
        "Navigation:".to_string(),
        "  j/k       - Down/up".to_string(),
        "  Ctrl+d/Ctrl+u - Page down/up".to_string(),
        "  gg/G      - Start/end of document".to_string(),
        "".to_string(),
        "Search:".to_string(),
        "  /pattern  - Search forward".to_string(),
        "  ?pattern  - Search backward".to_string(),
        "  n/N       - Next/previous match".to_string(),
      ],
      success_check: TutorialSuccessCondition::NoCondition,
    },
    InteractiveTutorialStep {
      title: "Credits".to_string(),
      instructions: vec![
        format!("{}About the Author{}", SetAttribute(Attribute::Bold), ResetColor),
        "".to_string(),
        "hygg is created and maintained by Ragnar Kruse (kruserr),".to_string(),
        "a passionate open-source developer dedicated to building".to_string(),
        "high-quality tools that enhance productivity and make".to_string(),
        "computing more enjoyable.".to_string(),
        "".to_string(),
        format!("{}Connect & Follow:{}", SetAttribute(Attribute::Bold), ResetColor),
        format!("‚Ä¢ GitHub: {}github.com/kruserr{}", 
          SetForegroundColor(Color::Blue), ResetColor),
        "".to_string(),
        format!("{}Support the Project:{}", SetAttribute(Attribute::Bold), ResetColor),
        "If hygg has improved your reading experience, consider".to_string(),
        "supporting its continued development. Your contribution".to_string(),
        "helps maintain and improve hygg for everyone!".to_string(),
        "".to_string(),
        "‚Üí Type :next to finish and return to your document...".to_string(),
      ],
      practice_text: vec![
        "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê".to_string(),
        "‚îÇ             Support Open Source          ‚îÇ".to_string(),
        "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§".to_string(),
        "‚îÇ                                          ‚îÇ".to_string(),
        "‚îÇ  Your support directly enables:          ‚îÇ".to_string(),
        "‚îÇ  ‚Ä¢ New features & improvements           ‚îÇ".to_string(),
        "‚îÇ  ‚Ä¢ Better platform compatibility         ‚îÇ".to_string(),
        "‚îÇ  ‚Ä¢ Faster bug fixes & updates            ‚îÇ".to_string(),
        "‚îÇ  ‚Ä¢ More comprehensive documentation      ‚îÇ".to_string(),
        "‚îÇ  ‚Ä¢ A sustainable open-source project     ‚îÇ".to_string(),
        "‚îÇ                                          ‚îÇ".to_string(),
        "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò".to_string(),
      ],
      success_check: TutorialSuccessCondition::NoCondition,
    },
  ]
}
